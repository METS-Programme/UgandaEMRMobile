name: Android CI with Versioning

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # full history for versioning

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 1

      - name: Create local.properties
        run: echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build and run tests
        run: ./gradlew clean assembleDebug testDebugUnitTest connectedDebugAndroidTest --stacktrace

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: UgandaEMR-Mobile-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Auto-tag new version
        if: github.ref == 'refs/heads/main'
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          VERSION_PARTS=(${LATEST_TAG//./ })
          MAJOR=${VERSION_PARTS[0]#v}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New version: $NEW_VERSION"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Generate release notes
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.auto_tag.outputs.tag }}
          name: Release ${{ steps.auto_tag.outputs.tag }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
